@startuml
skinparam style strictuml
skinparam classAttributeIconSize 0
hide enum methods
hide empty members

class controler.GameManager {
+ nextTurn(importedResources : Map<ResourceType, Integer>)
+ updateGraphics()
}

class view.TileMap implements model.VillageObserver{
+ reactToResourcesChange(resources : Map<ResourceType, Integer>)
+ reactToPlaceableChange(placeables : Placeable[])
}

class model.Building extends model.Placeable{
- productionCapacities : Integer
+ <<create>> Building(input : Map<ResourceType,Integer>, output : Map<ResourceType,Integer>, productionCapacities : Integer)
+ getResourceNeeds() : Map<ResourceType, Integer>
+ productResources(availableResources : Map<ResourceType,Integer>, neededResources : Map<ResourceType,Integer>)
}

class model.PlaceableFactory {
    + createHouse() : Placeable
    + createSawmill() : Placeable
    + createRail() : Placeable
    + createBar() : Placeable
    + createTrainStation() : Placeable
    + createForest() : Placeable
    + createField() : Placeable
}

class view.Trader implements model.VillageObserver{
+ Trader(gameManager : GameManager) <<create>>
+ reactToResourcesChange(resources : Map<ResourceType, Integer>)
+ reactToPlaceableChange(placeables : Placeable[])
+ nextTurn()
}

class view.Printer implements model.VillageObserver{
+ reactToResourcesChange(resources : Map<ResourceType, Integer>)
+ reactToPlaceableChange(placeables : Placeable[])
}

class controler.VillageManager{
+ nextTurn(importedResources : Map<ResourceType, Integer>)
}

enum model.PlaceableType <<enum>>{
HOUSE
SAWMILL
RAIL
BAR
TRAIN_STATION
FOREST
FIELD
}

class model.Resource extends model.Placeable{
- resourceQuantities : Integer
- maxQuantities : Integer
+ <<create>> Resource(resourceType : ResourceType, resourceQuantities : Integer)
+ productResources(availableResources : Map<ResourceType,Integer>, neededResources : Map<ResourceType,Integer>)
+ getResourceNeeds() : Map<ResourceType, Integer>
- regenerateResources()
}

abstract class model.Placeable {
# position : Integer[2]
+ {abstract} productResources(availableResources : Map<ResourceType,Integer>, neededResources : Map<ResourceType,Integer>)
+ {abstract} getResourceNeeds() : Map<ResourceType, Integer>
+ {abstract} getAvailableResources() : Map<ResourceType, Integer>
+ getPosition() : Integer[2]
}

class model.ResourceType <<enum>>{
WOOD
PLANK
BEER
HOP
ICE
MONEY
}

interface model.BuildingStrategy <<interface>> {
    + numberOfNewPlaceable(totalResources : Map<ResourceType, Integer>, fulfilmentOfNeeds : Double) : Map<PlaceableType,List<Placeable>>
}

class model.BuildingGrowthStrategy implements model.BuildingStrategy {
+ numberOfNewPlaceable(totalResources : Map<ResourceType, Integer>, fulfilmentOfNeeds : Double) : Map<PlaceableType,List<Placeable>>
}
class model.BuildingDecayStrategy implements model.BuildingStrategy {
+ numberOfNewPlaceable(totalResources : Map<ResourceType, Integer>, fulfilmentOfNeeds : Double) : Map<PlaceableType,List<Placeable>>
}

class model.BuildingStrategyFactory{
+ createGrowthStrategy()
+ createDecayStrategy()
}

class model.Village {
+ productResources()
+ getNeededResources() : Map<ResourceType, Integer>
+ getResources() : Map<ResourceType, Integer>
+ getAvailableResources() : Map<ResourceType, Integer>
+ fulfilmentOfNeeds(usableResources : Map<ResourceType, Integer>, neededResources : Map<ResourceType, Integer>) : Double
+ setBuildingStrategy(strategy : BuildingStrategy)
+ addObserver(observer : VillageObserver)
- notifyResourceChange()
+ seekCompatibleTiles(position : Integer[2], type : BuildingType) : Integer[2]
+ applyStrategy()
}

interface model.VillageObserver <<interface>>{
+ reactToResourcesChange(resources : Map<ResourceType, Integer>)
+ reactToPlaceableChange(placeables : Placeable[])
}

class model.EvolutionOfVillage {
+ determineStrategy()
}

class model.TileType{
    GRASS
    WATER
}

model.EvolutionOfVillage *--> "1\n-village" model.Village
model.EvolutionOfVillage *--> "1\n-buildingStrategyFactory" model.BuildingStrategyFactory
Village *--> "1\n-strategy" model.BuildingStrategy
Village *--> "*\n-placeables" model.Placeable : Compose <
Village *--> "*\n-tiles" model.TileType : construit sur >
Village ..> "<<uses>>" PlaceableType
view.TileMap ..> "<<uses>>" Placeable
Village o--> "*\n-observers" model.VillageObserver : < Observe
Village *--> "1\n-placeableFactory" model.PlaceableFactory
model.PlaceableFactory ..> "<<uses>>" PlaceableType
model.PlaceableFactory .> "<<uses>>" Placeable
model.PlaceableFactory .> "<<uses>>" Resource
model.PlaceableFactory .> "<<uses>>" Building
Placeable *--> "1\n-type" model.PlaceableType
VillageManager o--> "1\n-tilemap" view.TileMap
VillageManager *--> "1\n-village" Village
VillageManager *--> "1\n-evolutionOfVillage" EvolutionOfVillage
GameManager *--> "1\n-villageManager" controler.VillageManager
GameManager *--u> "1\n-printer" view.Printer
GameManager *--u> "1\n-trader" view.Trader
BuildingStrategyFactory ..> "<<uses>>" model.BuildingStrategy
BuildingStrategyFactory ..> "<<uses>>" model.BuildingGrowthStrategy
model.Building *--> "2 .. 3\n-resources" model.ResourceType
model.Resource *--> "1\n-resourceType" model.ResourceType
BuildingStrategyFactory ..> "<<uses>>" model.BuildingDecayStrategy
@enduml